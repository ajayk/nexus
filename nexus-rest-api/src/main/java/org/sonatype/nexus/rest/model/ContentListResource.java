/*
 =================== DO NOT EDIT THIS FILE ====================
 Generated by Modello 1.0.2 on 2010-01-11 12:09:20,
 any modifications will be overwritten.
 ==============================================================
 */

package org.sonatype.nexus.rest.model;

  //---------------------------------/
 //- Imported classes and packages -/
//---------------------------------/

import java.util.Collection;

/**
 * Class ContentListResource.
 * 
 * @version $Revision$ $Date$
 */
public class ContentListResource
    implements java.io.Serializable
{

      //--------------------------/
     //- Class/Member Variables -/
    //--------------------------/

    /**
     * Field resourceURI.
     */
    private String resourceURI;

    /**
     * Field relativePath.
     */
    private String relativePath;

    /**
     * Field text.
     */
    private String text;

    /**
     * Field leaf.
     */
    private boolean leaf = false;

    /**
     * Field lastModified.
     */
    private java.util.Date lastModified;

    /**
     * Field sizeOnDisk.
     */
    private long sizeOnDisk = 0L;

    /**
     * Field children.
     */
    private java.util.List<ContentListResource> children;


      //-----------/
     //- Methods -/
    //-----------/

    /**
     * Method addChildren.
     * 
     * @param contentListResource
     */
    public void addChildren( ContentListResource contentListResource )
    {
        if ( !(contentListResource instanceof ContentListResource) )
        {
            throw new ClassCastException( "ContentListResource.addChildren(contentListResource) parameter must be instanceof " + ContentListResource.class.getName() );
        }
        getChildren().add( contentListResource );
        contentListResource.createContentListResourceAssociation( this );
    } //-- void addChildren( ContentListResource )

    /**
     * Method breakContentListResourceAssociation.
     * 
     * @param contentListResource
     */
    public void breakContentListResourceAssociation( ContentListResource contentListResource )
    {
        if ( ! getChildren().contains( contentListResource ) )
        {
            throw new IllegalStateException( "contentListResource isn't associated." );
        }

        getChildren().remove( contentListResource );
    } //-- void breakContentListResourceAssociation( ContentListResource )

    /**
     * Method createContentListResourceAssociation.
     * 
     * @param contentListResource
     */
    public void createContentListResourceAssociation( ContentListResource contentListResource )
    {
        Collection children = getChildren();

        if ( children.contains( contentListResource ) )
        {
            throw new IllegalStateException( "contentListResource is already assigned." );
        }

        children.add( contentListResource );
    } //-- void createContentListResourceAssociation( ContentListResource )

    /**
     * Method getChildren.
     * 
     * @return List
     */
    public java.util.List<ContentListResource> getChildren()
    {
        if ( this.children == null )
        {
            this.children = new java.util.ArrayList<ContentListResource>();
        }

        return this.children;
    } //-- java.util.List<ContentListResource> getChildren()

    /**
     * Get the lastModified field.
     * 
     * @return Date
     */
    public java.util.Date getLastModified()
    {
        return this.lastModified;
    } //-- java.util.Date getLastModified()

    /**
     * Get the relativePath field.
     * 
     * @return String
     */
    public String getRelativePath()
    {
        return this.relativePath;
    } //-- String getRelativePath()

    /**
     * Get the resourceURI field.
     * 
     * @return String
     */
    public String getResourceURI()
    {
        return this.resourceURI;
    } //-- String getResourceURI()

    /**
     * Get the sizeOnDisk field.
     * 
     * @return long
     */
    public long getSizeOnDisk()
    {
        return this.sizeOnDisk;
    } //-- long getSizeOnDisk()

    /**
     * Get the text field.
     * 
     * @return String
     */
    public String getText()
    {
        return this.text;
    } //-- String getText()

    /**
     * Get the leaf field.
     * 
     * @return boolean
     */
    public boolean isLeaf()
    {
        return this.leaf;
    } //-- boolean isLeaf()

    /**
     * Method removeChildren.
     * 
     * @param contentListResource
     */
    public void removeChildren( ContentListResource contentListResource )
    {
        if ( !(contentListResource instanceof ContentListResource) )
        {
            throw new ClassCastException( "ContentListResource.removeChildren(contentListResource) parameter must be instanceof " + ContentListResource.class.getName() );
        }
        contentListResource.breakContentListResourceAssociation( this );
        getChildren().remove( contentListResource );
    } //-- void removeChildren( ContentListResource )

    /**
     * Set the children field.
     * 
     * @param children
     */
    public void setChildren( java.util.List<ContentListResource> children )
    {
        this.children = children;
    } //-- void setChildren( java.util.List )

    /**
     * Set the lastModified field.
     * 
     * @param lastModified
     */
    public void setLastModified( java.util.Date lastModified )
    {
        this.lastModified = lastModified;
    } //-- void setLastModified( java.util.Date )

    /**
     * Set the leaf field.
     * 
     * @param leaf
     */
    public void setLeaf( boolean leaf )
    {
        this.leaf = leaf;
    } //-- void setLeaf( boolean )

    /**
     * Set the relativePath field.
     * 
     * @param relativePath
     */
    public void setRelativePath( String relativePath )
    {
        this.relativePath = relativePath;
    } //-- void setRelativePath( String )

    /**
     * Set the resourceURI field.
     * 
     * @param resourceURI
     */
    public void setResourceURI( String resourceURI )
    {
        this.resourceURI = resourceURI;
    } //-- void setResourceURI( String )

    /**
     * Set the sizeOnDisk field.
     * 
     * @param sizeOnDisk
     */
    public void setSizeOnDisk( long sizeOnDisk )
    {
        this.sizeOnDisk = sizeOnDisk;
    } //-- void setSizeOnDisk( long )

    /**
     * Set the text field.
     * 
     * @param text
     */
    public void setText( String text )
    {
        this.text = text;
    } //-- void setText( String )


}
