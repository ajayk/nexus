<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Nexus Defaults" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="context" elementType="Argument">
            <stringProp name="Argument.name">context</stringProp>
            <stringProp name="Argument.value">${__P(nexus.context,/nexus)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">${__P(nexus.host,localhost)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">${__P(nexus.port,8081)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">${__P(nexus.protocol,http)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="group" elementType="Argument">
            <stringProp name="Argument.name">group</stringProp>
            <stringProp name="Argument.value">${__P(nexus.group,public)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">context=server context path</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="External Resources" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="result.dir" elementType="Argument">
            <stringProp name="Argument.name">result.dir</stringProp>
            <stringProp name="Argument.value">${__P(result.dir,.)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="data.dir" elementType="Argument">
            <stringProp name="Argument.name">data.dir</stringProp>
            <stringProp name="Argument.value">${__P(data.dir,../resources)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="data.id" elementType="Argument">
            <stringProp name="Argument.name">data.id</stringProp>
            <stringProp name="Argument.value">${__P(data.id,default)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="fileEncoding" elementType="Argument">
            <stringProp name="Argument.name">fileEncoding</stringProp>
            <stringProp name="Argument.value">${__P(fileEncoding,UTF-8)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">Define file paths as variables, using JMeter system properties as base</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Thread Details" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="activemq.threads" elementType="Argument">
            <stringProp name="Argument.name">activemq.threads</stringProp>
            <stringProp name="Argument.value">${__P(activemq.threads,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="activemq.rampup" elementType="Argument">
            <stringProp name="Argument.name">activemq.rampup</stringProp>
            <stringProp name="Argument.value">${__P(activemq.rampup,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="activemq.loop" elementType="Argument">
            <stringProp name="Argument.name">activemq.loop</stringProp>
            <stringProp name="Argument.value">${__P(activemq.loop,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="activemq.throughput" elementType="Argument">
            <stringProp name="Argument.name">activemq.throughput</stringProp>
            <stringProp name="Argument.value">${__P(activemq.throughput,50)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="activemq.duration" elementType="Argument">
            <stringProp name="Argument.name">activemq.duration</stringProp>
            <stringProp name="Argument.value">${__P(activemq.duration,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="activemq.delay" elementType="Argument">
            <stringProp name="Argument.name">activemq.delay</stringProp>
            <stringProp name="Argument.value">${__P(activemq.delay,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="maven3.threads" elementType="Argument">
            <stringProp name="Argument.name">maven3.threads</stringProp>
            <stringProp name="Argument.value">${__P(maven3.threads,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="maven3.rampup" elementType="Argument">
            <stringProp name="Argument.name">maven3.rampup</stringProp>
            <stringProp name="Argument.value">${__P(maven3.rampup,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="maven3.loop" elementType="Argument">
            <stringProp name="Argument.name">maven3.loop</stringProp>
            <stringProp name="Argument.value">${__P(maven3.loop,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="maven3.throughput" elementType="Argument">
            <stringProp name="Argument.name">maven3.throughput</stringProp>
            <stringProp name="Argument.value">${__P(maven3.throughput,50)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="maven3.duration" elementType="Argument">
            <stringProp name="Argument.name">maven3.duration</stringProp>
            <stringProp name="Argument.value">${__P(maven3.duration,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="maven3.delay" elementType="Argument">
            <stringProp name="Argument.name">maven3.delay</stringProp>
            <stringProp name="Argument.value">${__P(maven3.delay,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="nexusoss.threads" elementType="Argument">
            <stringProp name="Argument.name">nexusoss.threads</stringProp>
            <stringProp name="Argument.value">${__P(nexusoss.threads,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="nexusoss.rampup" elementType="Argument">
            <stringProp name="Argument.name">nexusoss.rampup</stringProp>
            <stringProp name="Argument.value">${__P(nexusoss.rampup,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="nexusoss.loop" elementType="Argument">
            <stringProp name="Argument.name">nexusoss.loop</stringProp>
            <stringProp name="Argument.value">${__P(nexusoss.loop,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="nexusoss.throughput" elementType="Argument">
            <stringProp name="Argument.name">nexusoss.throughput</stringProp>
            <stringProp name="Argument.value">${__P(nexusoss.throughput,50)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="nexusoss.duration" elementType="Argument">
            <stringProp name="Argument.name">nexusoss.duration</stringProp>
            <stringProp name="Argument.value">${__P(nexusoss.duration,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="nexusoss.delay" elementType="Argument">
            <stringProp name="Argument.name">nexusoss.delay</stringProp>
            <stringProp name="Argument.value">${__P(nexusoss.delay,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv.stopOnEOF" elementType="Argument">
            <stringProp name="Argument.name">csv.stopOnEOF</stringProp>
            <stringProp name="Argument.value">${__P(csv.stopOnEOF,True)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv.recycleOnEOF" elementType="Argument">
            <stringProp name="Argument.name">csv.recycleOnEOF</stringProp>
            <stringProp name="Argument.value">${__P(csv.recycleOnEOF,True)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">Variables for configuring thread pools, throughput controllers, etc. - anything that controls or manipulates thread execution</stringProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${host}</stringProp>
        <stringProp name="HTTPSampler.port">${port}</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">${context}</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="false">
        <collectionProp name="AuthManager.auth_list">
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">${protocol}://${host}:${port}${context}</stringProp>
            <stringProp name="Authorization.username">admin</stringProp>
            <stringProp name="Authorization.password">admin123</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
          </elementProp>
        </collectionProp>
      </AuthManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="activemq" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${activemq.threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${activemq.rampup}</stringProp>
        <longProp name="ThreadGroup.start_time">1286198441000</longProp>
        <longProp name="ThreadGroup.end_time">1286198441000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${activemq.duration}</stringProp>
        <stringProp name="ThreadGroup.delay">${activemq.delay}</stringProp>
        <stringProp name="TestPlan.comments">Increasing the number of threads essentially indicates how many concurrent builds you want to do since csv data file is loaded per thread in this thread group</stringProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="activemq.csv" enabled="true">
            <stringProp name="TestPlan.comments">file that contains repo paths of artifacts to fetch for simulating a build</stringProp>
            <stringProp name="filename">${data.dir}/builds/activemq.csv</stringProp>
            <stringProp name="fileEncoding">${fileEncoding}</stringProp>
            <stringProp name="variableNames">resourcePath</stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">true</boolProp>
            <stringProp name="recycle">${csv.recycleOnEOF}</stringProp>
            <stringProp name="stopThread">${csv.stopOnEOF}</stringProp>
            <stringProp name="shareMode">Current thread</stringProp>
          </CSVDataSet>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Run Build" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="2108044882">Common Modules</stringProp>
              <stringProp name="-1967453126">Maven Builds</stringProp>
              <stringProp name="1520798604">Common Elements</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="maven3" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${maven3.threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${maven3.rampup}</stringProp>
        <longProp name="ThreadGroup.start_time">1286198441000</longProp>
        <longProp name="ThreadGroup.end_time">1286198441000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${maven3.duration}</stringProp>
        <stringProp name="ThreadGroup.delay">${maven3.delay}</stringProp>
        <stringProp name="TestPlan.comments">Increasing the number of threads essentially indicates how many concurrent builds you want to do since csv data file is loaded per thread in this thread group</stringProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="maven3.csv" enabled="true">
            <stringProp name="TestPlan.comments">file that contains repo paths of artifacts to fetch for simulating a build</stringProp>
            <stringProp name="filename">${data.dir}/builds/maven3.csv</stringProp>
            <stringProp name="fileEncoding">${fileEncoding}</stringProp>
            <stringProp name="variableNames">resourcePath</stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">true</boolProp>
            <stringProp name="recycle">${csv.recycleOnEOF}</stringProp>
            <stringProp name="stopThread">${csv.stopOnEOF}</stringProp>
            <stringProp name="shareMode">Current thread</stringProp>
          </CSVDataSet>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Run Build" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="2108044882">Common Modules</stringProp>
              <stringProp name="-1967453126">Maven Builds</stringProp>
              <stringProp name="1520798604">Common Elements</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="nexusoss" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${nexusoss.threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${nexusoss.rampup}</stringProp>
        <longProp name="ThreadGroup.start_time">1286198441000</longProp>
        <longProp name="ThreadGroup.end_time">1286198441000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${nexusoss.duration}</stringProp>
        <stringProp name="ThreadGroup.delay">${nexusoss.delay}</stringProp>
        <stringProp name="TestPlan.comments">Increasing the number of threads essentially indicates how many concurrent builds you want to do since csv data file is loaded per thread in this thread group</stringProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="nexusoss.csv" enabled="true">
            <stringProp name="TestPlan.comments">file that contains repo paths of artifacts to fetch for simulating a build</stringProp>
            <stringProp name="filename">${data.dir}/builds/nexusoss.csv</stringProp>
            <stringProp name="fileEncoding">${fileEncoding}</stringProp>
            <stringProp name="variableNames">resourcePath</stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">true</boolProp>
            <stringProp name="recycle">${csv.recycleOnEOF}</stringProp>
            <stringProp name="stopThread">${csv.stopOnEOF}</stringProp>
            <stringProp name="shareMode">Current thread</stringProp>
          </CSVDataSet>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Run Build" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="2108044882">Common Modules</stringProp>
              <stringProp name="-1967453126">Maven Builds</stringProp>
              <stringProp name="1520798604">Common Elements</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
      </hashTree>
      <Summariser guiclass="SummariserGui" testclass="Summariser" testname="Summary Console" enabled="false"/>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename">${result.dir}/summary-${data.id}.jtl</stringProp>
        <boolProp name="useGroupName">true</boolProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Common Modules" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1286198052000</longProp>
        <longProp name="ThreadGroup.end_time">1286198052000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Maven Builds" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Common Elements" enabled="true">
            <stringProp name="TestPlan.comments">Common Elements for a Maven Build request</stringProp>
          </GenericController>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Maven Request Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2</stringProp>
                </elementProp>
                <elementProp name="Keep-Alive" elementType="Header">
                  <stringProp name="Header.name">Keep-Alive</stringProp>
                  <stringProp name="Header.value">115</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Java/1.6.0_20</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">threadNum</stringProp>
                  <stringProp name="Header.value">${__threadNum}</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Headers that Maven sends when requesting an artifact from a repository</stringProp>
            </HeaderManager>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Run Build" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="2108044882">Common Modules</stringProp>
                <stringProp name="1403771546">/nexus/content</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="/nexus/content" enabled="true">
          <stringProp name="TestPlan.comments">Requests under /nexus/content</stringProp>
        </GenericController>
        <hashTree>
          <HTTPSampler2 guiclass="HttpTestSampleGui2" testclass="HTTPSampler2" testname="GET Group" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${context}/content/groups/${group}${resourcePath}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSampler2>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
