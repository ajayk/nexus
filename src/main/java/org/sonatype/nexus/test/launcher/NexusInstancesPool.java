package org.sonatype.nexus.test.launcher;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.util.Properties;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.pool.BasePoolableObjectFactory;
import org.codehaus.plexus.PlexusContainer;
import org.codehaus.plexus.component.repository.ComponentDescriptor;
import org.codehaus.plexus.configuration.PlexusConfiguration;
import org.sonatype.appbooter.DefaultForkedAppBooter;
import org.sonatype.appbooter.ForkedAppBooter;
import org.sonatype.appbooter.ctl.ControllerClient;
import org.sonatype.nexus.test.utils.NexusIllegalStateException;
import org.sonatype.nexus.test.utils.TestProperties;

public class NexusInstancesPool
    extends BasePoolableObjectFactory
{

    private PlexusContainer container;

    public NexusInstancesPool( PlexusContainer container )
    {
        this.container = container;
    }

    @Override
    public Object makeObject()
        throws Exception
    {
        Integer nexusPort = getRandomPort();
        Integer controllerPort = getRandomPort();
        String nexusWorkDir = TestProperties.getPath( "nexus.work.dir" ) + nexusPort;
        String nexusBaseDir = TestProperties.getPath( "nexus.base.dir" );
        String nexusApp = nexusBaseDir + "/runtime/apps/nexus";

        Properties plexusProps = new Properties();
        plexusProps.setProperty( "application-port", nexusPort.toString() );
        plexusProps.setProperty( "application-host", "0.0.0.0" );
        plexusProps.setProperty( "runtime", nexusBaseDir + "/runtime" );
        plexusProps.setProperty( "apps", nexusBaseDir + "/runtime/apps" );
        plexusProps.setProperty( "nexus-work", nexusWorkDir );
        plexusProps.setProperty( "nexus-app", nexusApp );
        plexusProps.setProperty( "webapp", nexusBaseDir + "/runtime/apps/nexus/webapp" );
        plexusProps.setProperty( "webapp-context-path", "/nexus" );
        plexusProps.setProperty( "application-conf", nexusWorkDir + "/conf" );
        plexusProps.setProperty( "log4j-prop-file", TestProperties.getPath( "default-configs" ) + "/log4j.properties" );
        plexusProps.setProperty( "jetty.xml", nexusBaseDir + "/conf/jetty.xml" );
        plexusProps.setProperty( "index.template.file", "templates/index-debug.vm" );
        plexusProps.setProperty( "security-xml-file", nexusWorkDir + "/conf/security.xml" );
        File containerProperties = new File( nexusWorkDir, "plexus.properties" );
        containerProperties.getParentFile().mkdirs();
        FileOutputStream out = new FileOutputStream( containerProperties );
        plexusProps.store( out, "Generated by NexusInstancesPool" );
        out.close();

        ForkedAppBooter forkedAppBooter = null;
        synchronized ( this )
        {
            ComponentDescriptor<ForkedAppBooter> baseComp =
                container.getComponentDescriptor( ForkedAppBooter.class, ForkedAppBooter.class.getName(),
                                                  "DefaultForkedAppBooter" );

            PlexusConfiguration cfg = baseComp.getConfiguration();
            addChild( cfg, "disable-blocking", Boolean.TRUE.toString() );
            addChild( cfg, "debug", Boolean.FALSE.toString() );
            addChild( cfg, "java-cmd", "java" );
            addChild( cfg, "debug-port", TestProperties.getInteger( "debug-port", 5006 ).toString() );
            addChild( cfg, "debug-suspend", Boolean.TRUE.toString() );
            addChild(
                      cfg,
                      "debug-java-cmd",
                      "java -Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,server=y,suspend=@DEBUG_SUSPEND@,address=@DEBUG_PORT@ -Djava.compiler=NONE" );
            addChild( cfg, "launcher-class", "org.sonatype.appbooter.PlexusContainerHost" );
            addChild( cfg, "configuration", nexusBaseDir + "/conf/plexus.xml" );
            addChild( cfg, "basedir", nexusBaseDir );
            addChild( cfg, "temp-dir", TestProperties.getPath( "project.build.directory" ) + "/appbooter.tmp."
                + nexusPort );
            addChild( cfg, "classworldsJar", nexusBaseDir + "/lib/plexus-classworlds-1.4.jar" );
            addChild( cfg, "classworldsConf", nexusBaseDir + "/conf/classworlds.conf" );
            addChild( cfg, "class-path-elements", nexusApp + "/conf, " + nexusApp + "/lib/*.jar" );
            addChild( cfg, "sleep-after-start", "5000" );
            addChild( cfg, "control-port", controllerPort.toString() );
            addChild( cfg, "container-properties", containerProperties.getAbsolutePath() );

            ComponentDescriptor<ForkedAppBooter> comp = new ComponentDescriptor<ForkedAppBooter>();
            BeanUtils.copyProperties( comp, baseComp );
            comp.setRoleClass( ForkedAppBooter.class );
            comp.setRoleHint( "TestForkedAppBooter" + nexusPort );
            comp.setImplementationClass( DefaultForkedAppBooter.class );
            container.addComponentDescriptor( comp );

            forkedAppBooter = container.lookup( ForkedAppBooter.class, comp.getRoleHint() );
        }

        return new NexusContext( forkedAppBooter, nexusPort, new File( nexusWorkDir ) );
    }

    private void addChild( PlexusConfiguration cfg, String name, String value )
    {
        PlexusConfiguration child = cfg.getChild( name );
        if ( child != null )
        {
            child.setValue( value );
        }
        else
        {
            cfg.addChild( name, value );
        }
    }

    @Override
    public void activateObject( Object obj )
        throws Exception
    {
        System.out.println( "=========================================================================" );
        System.out.println( "=                                                                       =" );
        System.out.println( "=                                                                       =" );
        System.out.println( "= activate object                                                       =" );
        System.out.println( "=                                                                       =" );
        System.out.println( "=                                                                       =" );
        System.out.println( "=========================================================================" );

        ForkedAppBooter appBooter = ( (NexusContext) obj ).getForkedAppBooter();

        try
        {
            appBooter.start();
        }
        catch ( Exception e )
        {
            e.printStackTrace();
            throw e;
        }
        ControllerClient client = appBooter.getControllerClient();

        for ( int i = 0; i < 30; i++ )
        {
            if ( client.ping() )
            {
                return;
            }
            sleep( 200 );
        }

        throw new NexusIllegalStateException( "Unable to ping remote control!" );
    }

    @Override
    public boolean validateObject( Object obj )
    {
        ForkedAppBooter forkedAppBooter = ( (NexusContext) obj ).getForkedAppBooter();
        return forkedAppBooter != null;
    }

    private void sleep( int i )
    {
        try
        {
            Thread.sleep( i );
        }
        catch ( InterruptedException e )
        {
            // ok
        }
    }

    @Override
    public void passivateObject( Object obj )
        throws Exception
    {
        System.out.println( "=========================================================================" );
        System.out.println( "=                                                                       =" );
        System.out.println( "=                                                                       =" );
        System.out.println( "= passivate object                                                      =" );
        System.out.println( "=                                                                       =" );
        System.out.println( "=                                                                       =" );
        System.out.println( "=========================================================================" );

        ForkedAppBooter appBooter = ( (NexusContext) obj ).getForkedAppBooter();
        if ( !appBooter.isStopped() )
        {
            try
            {
                appBooter.stop();
            }
            catch ( Exception e )
            {
                e.printStackTrace();
                throw e;
            }
        }
    }

    @Override
    public void destroyObject( Object obj )
        throws Exception
    {
        System.out.println( "=========================================================================" );
        System.out.println( "=                                                                       =" );
        System.out.println( "=                                                                       =" );
        System.out.println( "= destroy object                                                        =" );
        System.out.println( "=                                                                       =" );
        System.out.println( "=                                                                       =" );
        System.out.println( "=========================================================================" );

        ForkedAppBooter appBooter = ( (NexusContext) obj ).getForkedAppBooter();
        try
        {
            appBooter.shutdown();
        }
        catch ( Exception e )
        {
            e.printStackTrace();
            throw e;
        }
        ( (NexusContext) obj ).kill();
    }

    private Integer getRandomPort()
        throws IOException
    {
        ServerSocket ss = new ServerSocket( 0 );
        try
        {
            return ss.getLocalPort();
        }
        finally
        {
            try
            {
                ss.close();
            }
            catch ( IOException e )
            {
                // no problem
            }
        }
    }
}
